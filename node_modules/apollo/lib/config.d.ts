import { GraphQLSchema } from "graphql";
export interface EndpointConfig {
    url?: string;
    subscriptions?: string;
    headers?: Object;
    skipSSLValidation?: boolean;
}
export interface SchemaDependency {
    schema?: string;
    endpoint?: EndpointConfig;
    engineKey?: string;
    extends?: string;
    clientSide?: boolean;
}
export interface DocumentSet {
    schema?: string;
    includes: string[];
    excludes: string[];
}
export interface ApolloConfig {
    configFile: string;
    projectFolder: string;
    name?: string;
    schemas?: {
        [name: string]: SchemaDependency;
    };
    queries?: DocumentSet[];
    engineEndpoint?: string;
}
export declare function loadConfig(obj: any, configFile: string, configDir: string, defaultEndpoint: boolean, defaultSchema: boolean): ApolloConfig;
export declare function loadConfigFromFile(file: string, defaultEndpoint: boolean, defaultSchema: boolean): ApolloConfig;
export declare function findAndLoadConfig(dir: string, defaultEndpoint: boolean, defaultSchema: boolean): ApolloConfig;
export interface ResolvedDocumentSet {
    schema?: GraphQLSchema;
    endpoint?: EndpointConfig;
    engineKey?: string;
    documentPaths: string[];
    originalSet: DocumentSet;
}
export declare function resolveSchema(name: string, config: ApolloConfig): Promise<GraphQLSchema | undefined>;
export declare function resolveDocumentSets(config: ApolloConfig, needSchema: boolean): Promise<ResolvedDocumentSet[]>;
