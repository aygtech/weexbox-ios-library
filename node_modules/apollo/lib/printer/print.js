"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const React = require("react");
const server_1 = require("react-dom/server");
const graphql_1 = require("graphql");
const ast_1 = require("./ast");
const decode = require("decode-html");
const diff_1 = require("./diff");
const emoji_1 = require("./emoji");
const Field = ({ field }) => (React.createElement(React.Fragment, null, graphql_1.print(field)));
const Value = ({ value }) => (React.createElement(React.Fragment, null, graphql_1.print(value)));
const nameFromKind = (kind) => {
    switch (kind) {
        case ast_1.TypeKind.ENUM:
            return "enum";
        case ast_1.TypeKind.OBJECT:
            return "type";
        case ast_1.TypeKind.INPUT_OBJECT:
            return "input";
        case ast_1.TypeKind.SCALAR:
            return "scalar";
        case ast_1.TypeKind.INTERFACE:
            return "interface";
        case ast_1.TypeKind.UNION:
            return "union";
        default:
            return null;
    }
};
const Fields = ({ name, fields }) => fields.length > 0 ? (React.createElement(React.Fragment, null,
    "\n",
    "  ",
    React.createElement(Header, { name: name }),
    fields.map((field, i) => (React.createElement(React.Fragment, { key: i },
        "  ",
        React.createElement(Field, { field: field, key: i }),
        "\n"))))) : null;
const Values = ({ name, values }) => values.length > 0 ? (React.createElement(React.Fragment, null,
    "\n",
    "  ",
    React.createElement(Header, { name: name }),
    values.map((value, i) => (React.createElement(React.Fragment, { key: i },
        "  ",
        React.createElement(Value, { value: value, key: i }),
        "\n"))))) : null;
const removals = ["TYPE_REMOVED"];
const Type = ({ change }) => {
    const type = change.type;
    if (!type)
        return null;
    const typeName = nameFromKind(type.kind);
    switch (type.kind) {
        case ast_1.TypeKind.UNION:
            const t = change.type;
            if (!t.types)
                return null;
            const types = t.types.map(({ name }) => name.value);
            return (React.createElement(React.Fragment, null,
                typeName,
                " ",
                type.name.value,
                " = ",
                types.join(" | "),
                "\n"));
        case ast_1.TypeKind.SCALAR:
            return (React.createElement(React.Fragment, null,
                typeName,
                " ",
                type.name.value,
                "\n"));
        case ast_1.TypeKind.ENUM: {
            const t = type;
            const values = t.values;
            const failure = values.filter(({ change }) => change && change.change === ast_1.ChangeType.FAILURE);
            const warning = values.filter(({ change }) => change && change.change === ast_1.ChangeType.WARNING);
            const notice = values.filter(({ change }) => change && change.change === ast_1.ChangeType.NOTICE);
            return (React.createElement(React.Fragment, null,
                typeName,
                " ",
                type.name.value,
                " { ",
                removals.includes(change.code) ? null : change.code ===
                    "TYPE_ADDED" ? (React.createElement(React.Fragment, null,
                    "\n  ",
                    React.createElement(Values, { name: `${emoji_1.n} Notice ${emoji_1.n}`, values: values }),
                    "\n")) : (React.createElement(React.Fragment, null,
                    "\n  ",
                    React.createElement(Values, { name: `${emoji_1.f} Failure ${emoji_1.f}`, values: failure }),
                    React.createElement(Values, { name: `${emoji_1.w} Warning ${emoji_1.w}`, values: warning }),
                    React.createElement(Values, { name: `${emoji_1.n} Notice ${emoji_1.n}`, values: notice }),
                    "\n")),
                "}\n"));
        }
        case ast_1.TypeKind.INTERFACE:
        case ast_1.TypeKind.OBJECT:
        case ast_1.TypeKind.INPUT_OBJECT: {
            const t = type;
            const fields = t.fields
                ? t.fields.filter(({ change }) => change)
                : [];
            const failure = fields.filter(({ change }) => change.change === ast_1.ChangeType.FAILURE);
            const warning = fields.filter(({ change }) => change.change === ast_1.ChangeType.WARNING);
            const notice = fields.filter(({ change }) => change.change === ast_1.ChangeType.NOTICE);
            const interfaces = t.interfaces
                ? t.interfaces
                : [];
            const implementedInterfaces = interfaces.length
                ? " implements " +
                    interfaces.map(({ name }) => name.value).join(" & ")
                : "";
            return (React.createElement(React.Fragment, null,
                typeName,
                " ",
                t.name.value,
                implementedInterfaces,
                " { ",
                removals.includes(change.code) ||
                    (change.code !== "TYPE_ADDED" &&
                        fields.length === 0) ? null : change.code === "TYPE_ADDED" ? (React.createElement(React.Fragment, null,
                    "\n  ",
                    React.createElement(Fields, { name: `${emoji_1.n} Notice ${emoji_1.n}`, fields: t.fields }),
                    "\n")) : (React.createElement(React.Fragment, null,
                    "\n  ",
                    React.createElement(Fields, { name: `${emoji_1.f} Failure ${emoji_1.f}`, fields: failure }),
                    React.createElement(Fields, { name: `${emoji_1.w} Warning ${emoji_1.w}`, fields: warning }),
                    React.createElement(Fields, { name: `${emoji_1.n} Notice ${emoji_1.n}`, fields: notice }),
                    "\n")),
                "}\n"));
        }
        default:
            return null;
    }
};
const Header = ({ name }) => (React.createElement(React.Fragment, null, "# " + name + "\n"));
const Schema = ({ changes }) => {
    const filteredChanges = lodash_1.uniqBy(changes.reverse(), "type.name.value");
    return (React.createElement(React.Fragment, null, filteredChanges.map((change, i) => (React.createElement(React.Fragment, { key: i },
        React.createElement(Type, { change: change }),
        "\n")))));
};
exports.printChanges = (changes) => decode(server_1.renderToStaticMarkup(React.createElement(Schema, { changes: changes })));
exports.printFromSchemas = (current, next) => exports.printChanges(diff_1.diffSchemas(current.getTypeMap(), next.getTypeMap()));
//# sourceMappingURL=print.js.map