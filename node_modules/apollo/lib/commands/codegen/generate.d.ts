import "apollo-codegen-core/lib/polyfills";
import { Command, flags } from "@oclif/command";
export default class Generate extends Command {
    static description: string;
    static flags: {
        target: flags.IOptionFlag<string | undefined>;
        namespace: flags.IOptionFlag<string | undefined>;
        passthroughCustomScalars: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        customScalarsPrefix: flags.IOptionFlag<string | undefined>;
        addTypename: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        operationIdsPath: flags.IOptionFlag<string | undefined>;
        mergeInFieldsFromFragmentSpreads: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        useFlowExactObjects: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        useFlowReadOnlyTypes: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        only: flags.IOptionFlag<string | undefined>;
        tagName: flags.IOptionFlag<string | undefined>;
        outputFlat: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        globalTypesFile: flags.IOptionFlag<string | undefined>;
        watch: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        key: flags.IOptionFlag<string | undefined>;
        engine: flags.IOptionFlag<string | undefined>;
        help: import("@oclif/parser/lib/flags").IBooleanFlag<void>;
        config: flags.IOptionFlag<string | undefined>;
        queries: flags.IOptionFlag<string | undefined>;
        schema: flags.IOptionFlag<string | undefined>;
        clientSchema: flags.IOptionFlag<string | undefined>;
    };
    static args: {
        name: string;
        description: string;
    }[];
    run(): Promise<any>;
}
