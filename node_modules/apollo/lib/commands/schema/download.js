"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const Listr = require("listr");
const localfs_1 = require("apollo-codegen-core/lib/localfs");
const util_1 = require("util");
const engine_cli_1 = require("../../engine-cli");
const load_schema_1 = require("../../load-schema");
const load_config_1 = require("../../load-config");
const graphql_1 = require("graphql");
class SchemaDownload extends command_1.Command {
    async run() {
        const { flags, args } = this.parse(SchemaDownload);
        const tasks = new Listr([
            load_config_1.loadConfigStep(flags, false),
            {
                title: "Fetching current schema",
                task: async (ctx) => {
                    if (Object.values(ctx.config.schemas).length > 1) {
                        this.error("More than one schema found.");
                    }
                    if (Object.values(ctx.config.schemas).length == 0) {
                        this.error("No schemas found.");
                    }
                    ctx.schema = await load_schema_1.loadSchema(Object.values(ctx.config.schemas)[0], ctx.config);
                }
            },
            {
                title: `Saving schema to ${args.output}`,
                task: async (ctx) => {
                    await util_1.promisify(localfs_1.fs.writeFile)(args.output, JSON.stringify((await graphql_1.execute(ctx.schema, graphql_1.parse(graphql_1.introspectionQuery))).data, null, 2));
                }
            }
        ]);
        return tasks.run();
    }
}
SchemaDownload.description = "Download the schema from your GraphQL endpoint.";
SchemaDownload.flags = Object.assign({ help: command_1.flags.help({
        char: "h",
        description: "Show command help"
    }), config: command_1.flags.string({
        description: "Path to your Apollo config file"
    }), header: command_1.flags.string({
        multiple: true,
        parse: header => {
            const [key, value] = header.split(":");
            return JSON.stringify({ [key.trim()]: value.trim() });
        },
        description: "Additional headers to send to server for introspectionQuery"
    }), endpoint: command_1.flags.string({
        description: "The URL of the server to fetch the schema from or path to ./your/local/schema.graphql"
    }), skipSSLValidation: command_1.flags.boolean({
        char: "k",
        description: "Allow connections to a SSL site without certs"
    }) }, engine_cli_1.engineFlags);
SchemaDownload.args = [
    {
        name: "output",
        description: "Path to write the introspection result to",
        required: true,
        default: "schema.json"
    }
];
exports.default = SchemaDownload;
//# sourceMappingURL=download.js.map